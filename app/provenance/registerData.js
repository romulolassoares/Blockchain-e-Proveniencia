const EntityDatabase = require("../database/models/provenance/entityModel");
const ActivityDatabase = require("../database/models/provenance/activityModel");
const AgentDatabase = require("../database/models/provenance/agentModel");
const ProvDatabase = require("../database/models/provenance/provModel");

const infoPrint = {
   docName: "test.pdf",
   color: "black-white",
   copy: 1,
   pages: 10,
   orientation: "portrait",
};

async function prov(userPki, transactionID, task) {
  const agentData = await AgentDatabase.findOne({
      name: userPki,
  });
  const activityData = await ActivityDatabase.findOne({
      name: transactionID,
  });
  const entityData = await EntityDatabase.findOne({
      name: task + " - " + infoPrint.docName,
  });

  console.log(agentData);
  console.log(activityData);
  console.log(entityData);

  const relationship = {
      wasGeneratedBy: entityData.name + " generated by " + activityData.name,
      used: entityData.name + " used by " + activityData.name,
      wasAssociatedWith: agentData.name + " responsible for " + activityData.name,
      wasAttribuitedWith: agentData.name + " assigned " + entityData.name,
  };

  const timestamp = new Date().toLocaleString();

  const provDatabase = new ProvDatabase({
      entity: entityData._id,
      activity: activityData._id,
      agent: agentData._id,
      relationship: relationship,
      timestamp: timestamp
  });

  provDatabase.save();
}

async function relashionshipRegister() {}

async function register(userPki, transactionID, task) {
    const existAgent = await AgentDatabase.findOne({
       name: userPki,
    });

    const entityDatabase = new EntityDatabase({
       name: task + " - " + infoPrint.docName,
       info: infoPrint,
    });

    const activityDatabase = new ActivityDatabase({
       name: transactionID,
    });

    if (!existAgent) {
    const agentDatabase = new AgentDatabase({
       name: userPki,
    });
    await agentDatabase.save();
    }

    await entityDatabase.save();
    await activityDatabase.save();

    await prov(userPki, transactionID, task);
}

module.exports = { register };